
P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000561c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005810  08005810  00015810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005898  08005898  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005898  08005898  00015898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800589c  0800589c  0001589c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000000c  080058ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080058ac  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a75c  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003564  00000000  00000000  0003a7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  0003dd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001094  00000000  00000000  0003f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d703  00000000  00000000  00040384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fcc  00000000  00000000  0006da87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001275f5  00000000  00000000  00086a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ca0  00000000  00000000  001ae048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001b3ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	080057f8 	.word	0x080057f8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	080057f8 	.word	0x080057f8

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fd77 	bl	80010aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f83a 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 fa1e 	bl	8000a00 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c4:	f000 f89c 	bl	8000700 <MX_ADC1_Init>
  MX_ICACHE_Init();
 80005c8:	f000 f910 	bl	80007ec <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80005cc:	f000 f922 	bl	8000814 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 80005d0:	f000 f96e 	bl	80008b0 <MX_RTC_Init>
  MX_UCPD1_Init();
 80005d4:	f000 f9b6 	bl	8000944 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80005d8:	f000 f9ea 	bl	80009b0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(flag == 1){
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0x74>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d10d      	bne.n	8000600 <main+0x4c>

		  if(estado==1){
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <main+0x78>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d103      	bne.n	80005f4 <main+0x40>
			  estado=0;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <main+0x78>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e002      	b.n	80005fa <main+0x46>
		  }else{
			  estado=1;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <main+0x78>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]
		  }
		  flag=0;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <main+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	  }
	if(estado==1){
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <main+0x78>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d108      	bne.n	800061a <main+0x66>

		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000608:	2180      	movs	r1, #128	; 0x80
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <main+0x7c>)
 800060c:	f002 f830 	bl	8002670 <HAL_GPIO_TogglePin>
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
//		HAL_Delay(500);
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 fdc0 	bl	8001198 <HAL_Delay>
 8000618:	e7e0      	b.n	80005dc <main+0x28>

	}else{
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2180      	movs	r1, #128	; 0x80
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <main+0x7c>)
 8000620:	f002 f80e 	bl	8002640 <HAL_GPIO_WritePin>
	  if(flag == 1){
 8000624:	e7da      	b.n	80005dc <main+0x28>
 8000626:	bf00      	nop
 8000628:	20000440 	.word	0x20000440
 800062c:	20000444 	.word	0x20000444
 8000630:	42020800 	.word	0x42020800

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b098      	sub	sp, #96	; 0x60
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2248      	movs	r2, #72	; 0x48
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 f8ac 	bl	80057a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000656:	2000      	movs	r0, #0
 8000658:	f002 f9a8 	bl	80029ac <HAL_PWREx_ControlVoltageScaling>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000662:	f000 fa85 	bl	8000b70 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000666:	f002 f983 	bl	8002970 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xc8>)
 800066c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <SystemClock_Config+0xc8>)
 8000672:	f023 0318 	bic.w	r3, r3, #24
 8000676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800067a:	2336      	movs	r3, #54	; 0x36
 800067c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067e:	2381      	movs	r3, #129	; 0x81
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006a8:	2337      	movs	r3, #55	; 0x37
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fa05 	bl	8002acc <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c8:	f000 fa52 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2105      	movs	r1, #5
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fec7 	bl	8003478 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 fa3e 	bl	8000b70 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3760      	adds	r7, #96	; 0x60
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40021000 	.word	0x40021000

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000722:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000724:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <MX_ADC1_Init+0xe4>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000728:	4b2d      	ldr	r3, [pc, #180]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072e:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000734:	4b2a      	ldr	r3, [pc, #168]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073a:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000742:	2204      	movs	r2, #4
 8000744:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000754:	2201      	movs	r2, #1
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000782:	4817      	ldr	r0, [pc, #92]	; (80007e0 <MX_ADC1_Init+0xe0>)
 8000784:	f000 fecc 	bl	8001520 <HAL_ADC_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 f9ef 	bl	8000b70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4810      	ldr	r0, [pc, #64]	; (80007e0 <MX_ADC1_Init+0xe0>)
 800079e:	f001 fc1b 	bl	8001fd8 <HAL_ADCEx_MultiModeConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007a8:	f000 f9e2 	bl	8000b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_ADC1_Init+0xe8>)
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b0:	2306      	movs	r3, #6
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b8:	237f      	movs	r3, #127	; 0x7f
 80007ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007bc:	2304      	movs	r3, #4
 80007be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0xe0>)
 80007ca:	f000 fff5 	bl	80017b8 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007d4:	f000 f9cc 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000028 	.word	0x20000028
 80007e4:	42028000 	.word	0x42028000
 80007e8:	0c900008 	.word	0x0c900008

080007ec <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 ff89 	bl	8002708 <HAL_ICACHE_ConfigAssociativityMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80007fc:	f000 f9b8 	bl	8000b70 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000800:	f001 ffa2 	bl	8002748 <HAL_ICACHE_Enable>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800080a:	f000 f9b1 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_LPUART1_UART_Init+0x94>)
 800081c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <MX_LPUART1_UART_Init+0x98>)
 8000822:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000838:	220c      	movs	r2, #12
 800083a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000856:	2200      	movs	r2, #0
 8000858:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800085c:	f003 ff40 	bl	80046e0 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000866:	f000 f983 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 800086e:	f004 fcd9 	bl	8005224 <HAL_UARTEx_SetTxFifoThreshold>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000878:	f000 f97a 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000880:	f004 fd0e 	bl	80052a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800088a:	f000 f971 	bl	8000b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_LPUART1_UART_Init+0x90>)
 8000890:	f004 fc8f 	bl	80051b2 <HAL_UARTEx_DisableFifoMode>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800089a:	f000 f969 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000090 	.word	0x20000090
 80008a8:	40008000 	.word	0x40008000
 80008ac:	00033324 	.word	0x00033324

080008b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_RTC_Init+0x8c>)
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <MX_RTC_Init+0x90>)
 80008ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_RTC_Init+0x8c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_RTC_Init+0x8c>)
 80008d4:	227f      	movs	r2, #127	; 0x7f
 80008d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_RTC_Init+0x8c>)
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_RTC_Init+0x8c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_RTC_Init+0x8c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_RTC_Init+0x8c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_RTC_Init+0x8c>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_RTC_Init+0x8c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008fe:	480f      	ldr	r0, [pc, #60]	; (800093c <MX_RTC_Init+0x8c>)
 8000900:	f003 fdb4 	bl	800446c <HAL_RTC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800090a:	f000 f931 	bl	8000b70 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_RTC_Init+0x8c>)
 8000924:	f003 feb0 	bl	8004688 <HAL_RTCEx_PrivilegeModeSet>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800092e:	f000 f91f 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000124 	.word	0x20000124
 8000940:	40002800 	.word	0x40002800

08000944 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800095a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800095e:	f7ff fe11 	bl	8000584 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000962:	2002      	movs	r0, #2
 8000964:	f7ff fdf6 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fdf3 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000972:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000974:	2303      	movs	r3, #3
 8000976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_UCPD1_Init+0x64>)
 8000982:	f004 fe64 	bl	800564e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800098a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800098c:	2303      	movs	r3, #3
 800098e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_UCPD1_Init+0x68>)
 800099a:	f004 fe58 	bl	800564e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	42020400 	.word	0x42020400
 80009ac:	42020000 	.word	0x42020000

080009b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <MX_USB_PCD_Init+0x4c>)
 80009b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009bc:	2208      	movs	r2, #8
 80009be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_USB_PCD_Init+0x48>)
 80009e6:	f001 febf 	bl	8002768 <HAL_PCD_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80009f0:	f000 f8be 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000014c 	.word	0x2000014c
 80009fc:	4000d400 	.word	0x4000d400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b4a      	ldr	r3, [pc, #296]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a43      	ldr	r2, [pc, #268]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000a5e:	f002 f801 	bl	8002a64 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	4831      	ldr	r0, [pc, #196]	; (8000b44 <MX_GPIO_Init+0x144>)
 8000a80:	f001 fdde 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	482f      	ldr	r0, [pc, #188]	; (8000b48 <MX_GPIO_Init+0x148>)
 8000a8c:	f001 fdd8 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	21a0      	movs	r1, #160	; 0xa0
 8000a94:	482d      	ldr	r0, [pc, #180]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a96:	f001 fdd3 	bl	8002640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4824      	ldr	r0, [pc, #144]	; (8000b44 <MX_GPIO_Init+0x144>)
 8000ab2:	f001 fc45 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	481f      	ldr	r0, [pc, #124]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000ace:	f001 fc37 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <MX_GPIO_Init+0x144>)
 8000aea:	f001 fc29 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <MX_GPIO_Init+0x148>)
 8000b08:	f001 fc1a 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000b24:	f001 fc0c 	bl	8002340 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2018      	movs	r0, #24
 8000b2e:	f001 fbd2 	bl	80022d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b32:	2018      	movs	r0, #24
 8000b34:	f001 fbe9 	bl	800230a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	42020800 	.word	0x42020800
 8000b48:	42020000 	.word	0x42020000
 8000b4c:	42020400 	.word	0x42020400

08000b50 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	flag=1;
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20000440 	.word	0x20000440

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	; 0xb8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	2294      	movs	r2, #148	; 0x94
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f004 fddb 	bl	80057a0 <memset>
  if(hadc->Instance==ADC1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_ADC_MspInit+0xa8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d137      	bne.n	8000c64 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000bfa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 ff1a 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000c12:	f7ff ffad 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_ADC_MspInit+0xac>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000c46:	2304      	movs	r3, #4
 8000c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <HAL_ADC_MspInit+0xb0>)
 8000c60:	f001 fb6e 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	37b8      	adds	r7, #184	; 0xb8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	42028000 	.word	0x42028000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	42020800 	.word	0x42020800

08000c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0ae      	sub	sp, #184	; 0xb8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	2294      	movs	r2, #148	; 0x94
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 fd81 	bl	80057a0 <memset>
  if(huart->Instance==LPUART1)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a22      	ldr	r2, [pc, #136]	; (8000d2c <HAL_UART_MspInit+0xb4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d13d      	bne.n	8000d24 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fec3 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc0:	f7ff ff56 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0xb8>)
 8000cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000cf4:	f001 feb6 	bl	8002a64 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000cf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d12:	2308      	movs	r3, #8
 8000d14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_UART_MspInit+0xbc>)
 8000d20:	f001 fb0e 	bl	8002340 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	37b8      	adds	r7, #184	; 0xb8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40008000 	.word	0x40008000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	42021800 	.word	0x42021800

08000d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0a8      	sub	sp, #160	; 0xa0
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2294      	movs	r2, #148	; 0x94
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fd29 	bl	80057a0 <memset>
  if(hrtc->Instance==RTC)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_RTC_MspInit+0x74>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d124      	bne.n	8000da2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 fe68 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d76:	f7ff fefb 	bl	8000b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_RTC_MspInit+0x78>)
 8000d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d80:	4a0b      	ldr	r2, [pc, #44]	; (8000db0 <HAL_RTC_MspInit+0x78>)
 8000d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_RTC_MspInit+0x78>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_RTC_MspInit+0x78>)
 8000d90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_RTC_MspInit+0x78>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	37a0      	adds	r7, #160	; 0xa0
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40002800 	.word	0x40002800
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0ae      	sub	sp, #184	; 0xb8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2294      	movs	r2, #148	; 0x94
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fce3 	bl	80057a0 <memset>
  if(hpcd->Instance==USB)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <HAL_PCD_MspInit+0xb4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d13d      	bne.n	8000e60 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fe23 	bl	8003a40 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff feb6 	bl	8000b70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e36:	230a      	movs	r3, #10
 8000e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e40:	4619      	mov	r1, r3
 8000e42:	480b      	ldr	r0, [pc, #44]	; (8000e70 <HAL_PCD_MspInit+0xbc>)
 8000e44:	f001 fa7c 	bl	8002340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_PCD_MspInit+0xb8>)
 8000e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	37b8      	adds	r7, #184	; 0xb8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	4000d400 	.word	0x4000d400
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	42020000 	.word	0x42020000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f94a 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ecc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed0:	f001 fbe8 	bl	80026a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000f0e:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e005      	b.n	8000f2a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	091b      	lsrs	r3, r3, #4
 8000f24:	f003 030f 	and.w	r3, r3, #15
 8000f28:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f2a:	4a46      	ldr	r2, [pc, #280]	; (8001044 <SystemCoreClockUpdate+0x148>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f34:	4b42      	ldr	r3, [pc, #264]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d866      	bhi.n	800100e <SystemCoreClockUpdate+0x112>
 8000f40:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <SystemCoreClockUpdate+0x4c>)
 8000f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f46:	bf00      	nop
 8000f48:	08000f7d 	.word	0x08000f7d
 8000f4c:	0800100f 	.word	0x0800100f
 8000f50:	0800100f 	.word	0x0800100f
 8000f54:	0800100f 	.word	0x0800100f
 8000f58:	08000f85 	.word	0x08000f85
 8000f5c:	0800100f 	.word	0x0800100f
 8000f60:	0800100f 	.word	0x0800100f
 8000f64:	0800100f 	.word	0x0800100f
 8000f68:	08000f8d 	.word	0x08000f8d
 8000f6c:	0800100f 	.word	0x0800100f
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	08000f95 	.word	0x08000f95
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	6013      	str	r3, [r2, #0]
      break;
 8000f82:	e048      	b.n	8001016 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <SystemCoreClockUpdate+0x150>)
 8000f88:	601a      	str	r2, [r3, #0]
      break;
 8000f8a:	e044      	b.n	8001016 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <SystemCoreClockUpdate+0x154>)
 8000f90:	601a      	str	r2, [r3, #0]
      break;
 8000f92:	e040      	b.n	8001016 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	f003 030f 	and.w	r3, r3, #15
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d003      	beq.n	8000fba <SystemCoreClockUpdate+0xbe>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d006      	beq.n	8000fc6 <SystemCoreClockUpdate+0xca>
 8000fb8:	e00b      	b.n	8000fd2 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000fba:	4a24      	ldr	r2, [pc, #144]	; (800104c <SystemCoreClockUpdate+0x150>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	613b      	str	r3, [r7, #16]
          break;
 8000fc4:	e00b      	b.n	8000fde <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000fc6:	4a22      	ldr	r2, [pc, #136]	; (8001050 <SystemCoreClockUpdate+0x154>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	613b      	str	r3, [r7, #16]
          break;
 8000fd0:	e005      	b.n	8000fde <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	613b      	str	r3, [r7, #16]
          break;
 8000fdc:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0e5b      	lsrs	r3, r3, #25
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	fbb2 f3f3 	udiv	r3, r2, r3
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 800100a:	6013      	str	r3, [r2, #0]
      break;
 800100c:	e003      	b.n	8001016 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	6013      	str	r3, [r2, #0]
      break;
 8001014:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <SystemCoreClockUpdate+0x144>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <SystemCoreClockUpdate+0x158>)
 8001022:	5cd3      	ldrb	r3, [r2, r3]
 8001024:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <SystemCoreClockUpdate+0x14c>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000
 8001044:	08005828 	.word	0x08005828
 8001048:	20000000 	.word	0x20000000
 800104c:	00f42400 	.word	0x00f42400
 8001050:	007a1200 	.word	0x007a1200
 8001054:	08005810 	.word	0x08005810

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800105c:	f7ff ff3c 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001060:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001062:	e003      	b.n	800106c <LoopCopyDataInit>

08001064 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001066:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001068:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800106a:	3104      	adds	r1, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <LoopForever+0xa>)
	ldr	r3, =_edata
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001070:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001072:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001074:	d3f6      	bcc.n	8001064 <CopyDataInit>
	ldr	r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001078:	e002      	b.n	8001080 <LoopFillZerobss>

0800107a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800107a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800107c:	f842 3b04 	str.w	r3, [r2], #4

08001080 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <LoopForever+0x16>)
	cmp	r2, r3
 8001082:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001084:	d3f9      	bcc.n	800107a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001086:	f004 fb93 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fa93 	bl	80005b4 <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001090:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001094:	080058a0 	.word	0x080058a0
	ldr	r0, =_sdata
 8001098:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800109c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010a0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010a4:	2000044c 	.word	0x2000044c

080010a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_2_IRQHandler>

080010aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80010b4:	2004      	movs	r0, #4
 80010b6:	f001 f903 	bl	80022c0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80010ba:	f7ff ff1f 	bl	8000efc <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f80e 	bl	80010e0 <HAL_InitTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	e001      	b.n	80010d4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d0:	f7ff fd54 	bl	8000b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_InitTick+0x6c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_InitTick+0x70>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_InitTick+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f90b 	bl	8002326 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10f      	bne.n	8001136 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b07      	cmp	r3, #7
 800111a:	d809      	bhi.n	8001130 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f001 f8d7 	bl	80022d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_InitTick+0x74>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e007      	b.n	8001140 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e004      	b.n	8001140 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e001      	b.n	8001140 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000000 	.word	0x20000000
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	20000448 	.word	0x20000448

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000448 	.word	0x20000448

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008

080011e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3360      	adds	r3, #96	; 0x60
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LL_ADC_SetOffset+0x44>)
 800126a:	4013      	ands	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	4313      	orrs	r3, r2
 8001278:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	03fff000 	.word	0x03fff000

08001290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3360      	adds	r3, #96	; 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3360      	adds	r3, #96	; 0x60
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	615a      	str	r2, [r3, #20]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3330      	adds	r3, #48	; 0x30
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 030c 	and.w	r3, r3, #12
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	211f      	movs	r1, #31
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	401a      	ands	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	0e9b      	lsrs	r3, r3, #26
 8001350:	f003 011f 	and.w	r1, r3, #31
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	431a      	orrs	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3314      	adds	r3, #20
 8001380:	461a      	mov	r2, r3
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0e5b      	lsrs	r3, r3, #25
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	4413      	add	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	0d1b      	lsrs	r3, r3, #20
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2107      	movs	r1, #7
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	0d1b      	lsrs	r3, r3, #20
 80013aa:	f003 031f 	and.w	r3, r3, #31
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013ba:	bf00      	nop
 80013bc:	371c      	adds	r7, #28
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0318 	and.w	r3, r3, #24
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <LL_ADC_SetChannelSingleDiff+0x44>)
 80013ec:	40d9      	lsrs	r1, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	400b      	ands	r3, r1
 80013f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013f6:	431a      	orrs	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	0007ffff 	.word	0x0007ffff

08001410 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6093      	str	r3, [r2, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001448:	d101      	bne.n	800144e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800146c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001470:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001498:	d101      	bne.n	800149e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <LL_ADC_IsEnabled+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_IsEnabled+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d101      	bne.n	80014ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	2b08      	cmp	r3, #8
 800150a:	d101      	bne.n	8001510 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e12e      	b.n	8001798 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fb3b 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff67 	bl	8001434 <LL_ADC_IsDeepPowerDownEnabled>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff4d 	bl	8001410 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff82 	bl	8001484 <LL_ADC_IsInternalRegulatorEnabled>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d115      	bne.n	80015b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff66 	bl	800145c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001590:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <HAL_ADC_Init+0x280>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	4a83      	ldr	r2, [pc, #524]	; (80017a4 <HAL_ADC_Init+0x284>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	099b      	lsrs	r3, r3, #6
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a4:	e002      	b.n	80015ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff64 	bl	8001484 <LL_ADC_IsInternalRegulatorEnabled>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10d      	bne.n	80015de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff75 	bl	80014d2 <LL_ADC_REG_IsConversionOngoing>
 80015e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80c7 	bne.w	8001786 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 80c3 	bne.w	8001786 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001604:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff49 	bl	80014ac <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d110      	bne.n	8001642 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001620:	4861      	ldr	r0, [pc, #388]	; (80017a8 <HAL_ADC_Init+0x288>)
 8001622:	f7ff ff43 	bl	80014ac <LL_ADC_IsEnabled>
 8001626:	4604      	mov	r4, r0
 8001628:	4860      	ldr	r0, [pc, #384]	; (80017ac <HAL_ADC_Init+0x28c>)
 800162a:	f7ff ff3f 	bl	80014ac <LL_ADC_IsEnabled>
 800162e:	4603      	mov	r3, r0
 8001630:	4323      	orrs	r3, r4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	485c      	ldr	r0, [pc, #368]	; (80017b0 <HAL_ADC_Init+0x290>)
 800163e:	f7ff fdcf 	bl	80011e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800164c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001652:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001658:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001660:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d106      	bne.n	800167e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	3b01      	subs	r3, #1
 8001676:	045b      	lsls	r3, r3, #17
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d009      	beq.n	800169a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <HAL_ADC_Init+0x294>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff20 	bl	80014f8 <LL_ADC_INJ_IsConversionOngoing>
 80016b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d140      	bne.n	8001742 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d13d      	bne.n	8001742 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7e1b      	ldrb	r3, [r3, #24]
 80016ce:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016d0:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e8:	f023 0306 	bic.w	r3, r3, #6
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	69b9      	ldr	r1, [r7, #24]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d118      	bne.n	8001732 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001722:	430a      	orrs	r2, r1
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	e007      	b.n	8001742 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10c      	bne.n	8001764 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f023 010f 	bic.w	r1, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	631a      	str	r2, [r3, #48]	; 0x30
 8001762:	e007      	b.n	8001774 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020f 	bic.w	r2, r2, #15
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	f023 0303 	bic.w	r3, r3, #3
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58
 8001784:	e007      	b.n	8001796 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001796:	7ffb      	ldrb	r3, [r7, #31]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3724      	adds	r7, #36	; 0x24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	20000000 	.word	0x20000000
 80017a4:	053e2d63 	.word	0x053e2d63
 80017a8:	42028000 	.word	0x42028000
 80017ac:	42028100 	.word	0x42028100
 80017b0:	42028300 	.word	0x42028300
 80017b4:	fff0c007 	.word	0xfff0c007

080017b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b0b7      	sub	sp, #220	; 0xdc
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_ConfigChannel+0x22>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e3c1      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x7a6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fe73 	bl	80014d2 <LL_ADC_REG_IsConversionOngoing>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 83a6 	bne.w	8001f40 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	f7ff fd89 	bl	8001318 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe61 	bl	80014d2 <LL_ADC_REG_IsConversionOngoing>
 8001810:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fe6d 	bl	80014f8 <LL_ADC_INJ_IsConversionOngoing>
 800181e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001822:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 81c1 	bne.w	8001bae <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800182c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 81bc 	bne.w	8001bae <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800183e:	d10f      	bne.n	8001860 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff fd90 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fd4a 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800185e:	e00e      	b.n	800187e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	461a      	mov	r2, r3
 800186e:	f7ff fd7f 	bl	8001370 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fd3a 	bl	80012f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	08db      	lsrs	r3, r3, #3
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d00a      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6919      	ldr	r1, [r3, #16]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b0:	f7ff fcca 	bl	8001248 <LL_ADC_SetOffset>
 80018b4:	e17b      	b.n	8001bae <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fce7 	bl	8001290 <LL_ADC_GetOffsetChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x12a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fcdc 	bl	8001290 <LL_ADC_GetOffsetChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	e01e      	b.n	8001920 <HAL_ADC_ConfigChannel+0x168>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fcd1 	bl	8001290 <LL_ADC_GetOffsetChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001908:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001910:	2320      	movs	r3, #32
 8001912:	e004      	b.n	800191e <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x180>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	e018      	b.n	800196a <HAL_ADC_ConfigChannel+0x1b2>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800194c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800195c:	2320      	movs	r3, #32
 800195e:	e004      	b.n	800196a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800196a:	429a      	cmp	r2, r3
 800196c:	d106      	bne.n	800197c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fca0 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fc84 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1f0>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2101      	movs	r1, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fc79 	bl	8001290 <LL_ADC_GetOffsetChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 021f 	and.w	r2, r3, #31
 80019a6:	e01e      	b.n	80019e6 <HAL_ADC_ConfigChannel+0x22e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc6e 	bl	8001290 <LL_ADC_GetOffsetChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80019d6:	2320      	movs	r3, #32
 80019d8:	e004      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80019da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x246>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	e018      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x278>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001a22:	2320      	movs	r3, #32
 8001a24:	e004      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc3d 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2102      	movs	r1, #2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fc21 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x2b6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc16 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	e01e      	b.n	8001aac <HAL_ADC_ConfigChannel+0x2f4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2102      	movs	r1, #2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fc0b 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	e004      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001aa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x30c>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	e016      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x33a>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e004      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d106      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2102      	movs	r1, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fbdc 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2103      	movs	r1, #3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fbc0 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x378>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2103      	movs	r1, #3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fbb5 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	0e9b      	lsrs	r3, r3, #26
 8001b2a:	f003 021f 	and.w	r2, r3, #31
 8001b2e:	e017      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x3a8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2103      	movs	r1, #3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fbaa 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e003      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x3c0>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	e011      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x3e4>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e003      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d106      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fb87 	bl	80012bc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fc7a 	bl	80014ac <LL_ADC_IsEnabled>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 81c9 	bne.w	8001f52 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f7ff fbfb 	bl	80013c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a8f      	ldr	r2, [pc, #572]	; (8001e14 <HAL_ADC_ConfigChannel+0x65c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	f040 8131 	bne.w	8001e40 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x44e>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0e9b      	lsrs	r3, r3, #26
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	2b09      	cmp	r3, #9
 8001bfc:	bf94      	ite	ls
 8001bfe:	2301      	movls	r3, #1
 8001c00:	2300      	movhi	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	e019      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x482>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c16:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c24:	fab3 f383 	clz	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d079      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x4a2>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	3301      	adds	r3, #1
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c58:	e015      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x4ce>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c6a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001c72:	2320      	movs	r3, #32
 8001c74:	e003      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	069b      	lsls	r3, r3, #26
 8001c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x4ee>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	e017      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x51e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e003      	b.n	8001cca <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	ea42 0103 	orr.w	r1, r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x544>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	0e9b      	lsrs	r3, r3, #26
 8001cec:	3301      	adds	r3, #1
 8001cee:	f003 021f 	and.w	r2, r3, #31
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	051b      	lsls	r3, r3, #20
 8001cfa:	e018      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x576>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 021f 	and.w	r2, r3, #31
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	e081      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x596>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d4c:	e015      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x5c2>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8001d66:	2320      	movs	r3, #32
 8001d68:	e003      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	069b      	lsls	r3, r3, #26
 8001d76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x5e2>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0e9b      	lsrs	r3, r3, #26
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f003 031f 	and.w	r3, r3, #31
 8001d92:	2101      	movs	r1, #1
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	e017      	b.n	8001dca <HAL_ADC_ConfigChannel+0x612>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	61fb      	str	r3, [r7, #28]
  return result;
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	ea42 0103 	orr.w	r1, r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x63e>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	0e9b      	lsrs	r3, r3, #26
 8001de0:	3301      	adds	r3, #1
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	3b1e      	subs	r3, #30
 8001dee:	051b      	lsls	r3, r3, #20
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df4:	e01e      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x67c>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	613b      	str	r3, [r7, #16]
  return result;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d104      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e006      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x668>
 8001e12:	bf00      	nop
 8001e14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 021f 	and.w	r2, r3, #31
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b1e      	subs	r3, #30
 8001e2e:	051b      	lsls	r3, r3, #20
 8001e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e34:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff fa98 	bl	8001370 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8082 	beq.w	8001f52 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e4e:	4847      	ldr	r0, [pc, #284]	; (8001f6c <HAL_ADC_ConfigChannel+0x7b4>)
 8001e50:	f7ff f9ec 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 8001e54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e58:	4845      	ldr	r0, [pc, #276]	; (8001f70 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e5a:	f7ff fb27 	bl	80014ac <LL_ADC_IsEnabled>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	4844      	ldr	r0, [pc, #272]	; (8001f74 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e62:	f7ff fb23 	bl	80014ac <LL_ADC_IsEnabled>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4323      	orrs	r3, r4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d15e      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a41      	ldr	r2, [pc, #260]	; (8001f78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d127      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d121      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d161      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e96:	4619      	mov	r1, r3
 8001e98:	4834      	ldr	r0, [pc, #208]	; (8001f6c <HAL_ADC_ConfigChannel+0x7b4>)
 8001e9a:	f7ff f9b4 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_ADC_ConfigChannel+0x7c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8001eb6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f9      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec6:	e044      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d113      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_ADC_ConfigChannel+0x7b8>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d134      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481e      	ldr	r0, [pc, #120]	; (8001f6c <HAL_ADC_ConfigChannel+0x7b4>)
 8001ef4:	f7ff f987 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ef8:	e02b      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d126      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d120      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d11b      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f22:	4619      	mov	r1, r3
 8001f24:	4811      	ldr	r0, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x7b4>)
 8001f26:	f7ff f96e 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
 8001f2a:	e012      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f3e:	e008      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	37dc      	adds	r7, #220	; 0xdc
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	80080000 	.word	0x80080000
 8001f6c:	42028300 	.word	0x42028300
 8001f70:	42028000 	.word	0x42028000
 8001f74:	42028100 	.word	0x42028100
 8001f78:	c7520000 	.word	0xc7520000
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	053e2d63 	.word	0x053e2d63
 8001f84:	cb840000 	.word	0xcb840000
 8001f88:	80000001 	.word	0x80000001

08001f8c <LL_ADC_IsEnabled>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <LL_ADC_IsEnabled+0x18>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <LL_ADC_IsEnabled+0x1a>
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b0a1      	sub	sp, #132	; 0x84
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e089      	b.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001ffe:	2300      	movs	r3, #0
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002002:	2300      	movs	r3, #0
 8002004:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e001      	b.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10b      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e068      	b.n	800210a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb9 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 8002040:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ffb3 	bl	8001fb2 <LL_ADC_REG_IsConversionOngoing>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d14a      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002054:	2b00      	cmp	r3, #0
 8002056:	d147      	bne.n	80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002058:	4b30      	ldr	r3, [pc, #192]	; (800211c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800205a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d027      	beq.n	80020b4 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002076:	035b      	lsls	r3, r3, #13
 8002078:	430b      	orrs	r3, r1
 800207a:	431a      	orrs	r2, r3
 800207c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800207e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002080:	4824      	ldr	r0, [pc, #144]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002082:	f7ff ff83 	bl	8001f8c <LL_ADC_IsEnabled>
 8002086:	4604      	mov	r4, r0
 8002088:	4823      	ldr	r0, [pc, #140]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800208a:	f7ff ff7f 	bl	8001f8c <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	4323      	orrs	r3, r4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d132      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800209e:	f023 030f 	bic.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020b2:	e023      	b.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c0:	4814      	ldr	r0, [pc, #80]	; (8002114 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80020c2:	f7ff ff63 	bl	8001f8c <LL_ADC_IsEnabled>
 80020c6:	4604      	mov	r4, r0
 80020c8:	4813      	ldr	r0, [pc, #76]	; (8002118 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020ca:	f7ff ff5f 	bl	8001f8c <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4323      	orrs	r3, r4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d112      	bne.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020de:	f023 030f 	bic.w	r3, r3, #15
 80020e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020e6:	e009      	b.n	80020fc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80020fa:	e000      	b.n	80020fe <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002106:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800210a:	4618      	mov	r0, r3
 800210c:	3784      	adds	r7, #132	; 0x84
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	42028000 	.word	0x42028000
 8002118:	42028100 	.word	0x42028100
 800211c:	42028300 	.word	0x42028300

08002120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800213c:	4013      	ands	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002148:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <__NVIC_SetPriorityGrouping+0x44>)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	60d3      	str	r3, [r2, #12]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <__NVIC_GetPriorityGrouping+0x18>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	f003 0307 	and.w	r3, r3, #7
}
 8002176:	4618      	mov	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0152      	lsls	r2, r2, #5
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0152      	lsls	r2, r2, #5
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b03      	cmp	r3, #3
 8002230:	bf28      	it	cs
 8002232:	2303      	movcs	r3, #3
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3303      	adds	r3, #3
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b04      	subs	r3, #4
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d301      	bcc.n	8002292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228e:	2301      	movs	r3, #1
 8002290:	e00f      	b.n	80022b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <SysTick_Config+0x40>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229a:	2107      	movs	r1, #7
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f7ff ff8e 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <SysTick_Config+0x40>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SysTick_Config+0x40>)
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	e000e010 	.word	0xe000e010

080022c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff29 	bl	8002120 <__NVIC_SetPriorityGrouping>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	4603      	mov	r3, r0
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff40 	bl	8002168 <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff90 	bl	8002214 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5f 	bl	80021c0 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff33 	bl	8002184 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa4 	bl	800227c <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800234e:	e158      	b.n	8002602 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 814a 	beq.w	80025fc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d005      	beq.n	8002380 <HAL_GPIO_Init+0x40>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d130      	bne.n	80023e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b6:	2201      	movs	r2, #1
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0201 	and.w	r2, r3, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d017      	beq.n	800241e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	2203      	movs	r2, #3
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d123      	bne.n	8002472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691a      	ldr	r2, [r3, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	08da      	lsrs	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3208      	adds	r2, #8
 800246c:	6939      	ldr	r1, [r7, #16]
 800246e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0203 	and.w	r2, r3, #3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 80a4 	beq.w	80025fc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80024b4:	4a5a      	ldr	r2, [pc, #360]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3318      	adds	r3, #24
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a52      	ldr	r2, [pc, #328]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d025      	beq.n	800252c <HAL_GPIO_Init+0x1ec>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01f      	beq.n	8002528 <HAL_GPIO_Init+0x1e8>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a50      	ldr	r2, [pc, #320]	; (800262c <HAL_GPIO_Init+0x2ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d019      	beq.n	8002524 <HAL_GPIO_Init+0x1e4>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a4f      	ldr	r2, [pc, #316]	; (8002630 <HAL_GPIO_Init+0x2f0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_GPIO_Init+0x1e0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a4e      	ldr	r2, [pc, #312]	; (8002634 <HAL_GPIO_Init+0x2f4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00d      	beq.n	800251c <HAL_GPIO_Init+0x1dc>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a4d      	ldr	r2, [pc, #308]	; (8002638 <HAL_GPIO_Init+0x2f8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d007      	beq.n	8002518 <HAL_GPIO_Init+0x1d8>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_GPIO_Init+0x2fc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_GPIO_Init+0x1d4>
 8002510:	2306      	movs	r3, #6
 8002512:	e00c      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002514:	2307      	movs	r3, #7
 8002516:	e00a      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002518:	2305      	movs	r3, #5
 800251a:	e008      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 800251c:	2304      	movs	r3, #4
 800251e:	e006      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002520:	2303      	movs	r3, #3
 8002522:	e004      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002524:	2302      	movs	r3, #2
 8002526:	e002      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_GPIO_Init+0x1ee>
 800252c:	2300      	movs	r3, #0
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f002 0203 	and.w	r2, r2, #3
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	4093      	lsls	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800253e:	4938      	ldr	r1, [pc, #224]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3318      	adds	r3, #24
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800254c:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002570:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002576:	4b2a      	ldr	r3, [pc, #168]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800259a:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 80025d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_GPIO_Init+0x2e0>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	f47f ae9f 	bne.w	8002350 <HAL_GPIO_Init+0x10>
  }
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	4002f400 	.word	0x4002f400
 8002624:	42020000 	.word	0x42020000
 8002628:	42020400 	.word	0x42020400
 800262c:	42020800 	.word	0x42020800
 8002630:	42020c00 	.word	0x42020c00
 8002634:	42021000 	.word	0x42021000
 8002638:	42021400 	.word	0x42021400
 800263c:	42021800 	.word	0x42021800

08002640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
 800264c:	4613      	mov	r3, r2
 800264e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002650:	787b      	ldrb	r3, [r7, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002656:	887a      	ldrh	r2, [r7, #2]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800265c:	e002      	b.n	8002664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43d9      	mvns	r1, r3
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	400b      	ands	r3, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fa44 	bl	8000b50 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026d4:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f807 	bl	80026f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	4002f400 	.word	0x4002f400

080026f0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	e007      	b.n	8002736 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0204 	bic.w	r2, r3, #4
 800272e:	4905      	ldr	r1, [pc, #20]	; (8002744 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40030400 	.word	0x40030400

08002748 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800274c:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_ICACHE_Enable+0x1c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_ICACHE_Enable+0x1c>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40030400 	.word	0x40030400

08002768 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	b08b      	sub	sp, #44	; 0x2c
 800276c:	af06      	add	r7, sp, #24
 800276e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0cb      	b.n	8002912 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fb10 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2203      	movs	r2, #3
 8002798:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f002 ffc1 	bl	8005728 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e040      	b.n	800282e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3301      	adds	r3, #1
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3303      	adds	r3, #3
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3338      	adds	r3, #56	; 0x38
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	333c      	adds	r3, #60	; 0x3c
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3340      	adds	r3, #64	; 0x40
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	3301      	adds	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3b9      	bcc.n	80027ac <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e044      	b.n	80028c8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	3301      	adds	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3b5      	bcc.n	800283e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	687e      	ldr	r6, [r7, #4]
 80028da:	466d      	mov	r5, sp
 80028dc:	f106 0410 	add.w	r4, r6, #16
 80028e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	602b      	str	r3, [r5, #0]
 80028e8:	1d33      	adds	r3, r6, #4
 80028ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ec:	6838      	ldr	r0, [r7, #0]
 80028ee:	f002 ff36 	bl	800575e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f805 	bl	800291a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800291a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800293e:	b29b      	uxth	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002952:	b29b      	uxth	r3, r3
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40007000 	.word	0x40007000

080029ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029bc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80029be:	f000 f861 	bl	8002a84 <HAL_PWREx_SMPS_GetEffectiveMode>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c8:	d101      	bne.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e03e      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029da:	d101      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e035      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d101      	bne.n	80029ec <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e02f      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80029f4:	4917      	ldr	r1, [pc, #92]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 80029fc:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_PWREx_ControlVoltageScaling+0xac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	4a16      	ldr	r2, [pc, #88]	; (8002a5c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	09db      	lsrs	r3, r3, #7
 8002a0a:	2232      	movs	r2, #50	; 0x32
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1c:	e002      	b.n	8002a24 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d102      	bne.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f2      	bne.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d101      	bne.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e000      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40007000 	.word	0x40007000
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002a60:	cccccccd 	.word	0xcccccccd

08002a64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	6053      	str	r3, [r2, #4]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40007000 	.word	0x40007000

08002a84 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002a8a:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	e00a      	b.n	8002ab8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e001      	b.n	8002ab8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002ab8:	687b      	ldr	r3, [r7, #4]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40007000 	.word	0x40007000

08002acc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f000 bcc2 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	4b99      	ldr	r3, [pc, #612]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aea:	4b97      	ldr	r3, [pc, #604]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80e9 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_RCC_OscConfig+0x4a>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	f040 8083 	bne.w	8002c16 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d17f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b16:	4b8c      	ldr	r3, [pc, #560]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_RCC_OscConfig+0x64>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f000 bc9a 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d004      	beq.n	8002b4a <HAL_RCC_OscConfig+0x7e>
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b48:	e005      	b.n	8002b56 <HAL_RCC_OscConfig+0x8a>
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d224      	bcs.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fe9c 	bl	800389c <RCC_SetFlashLatencyFromMSIRange>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f000 bc7a 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a74      	ldr	r2, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	496f      	ldr	r1, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	496a      	ldr	r1, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 8002ba2:	e026      	b.n	8002bf2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	4962      	ldr	r1, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	495d      	ldr	r1, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fe5b 	bl	800389c <RCC_SetFlashLatencyFromMSIRange>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	f000 bc39 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bf2:	f000 fe17 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002bfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bfc:	4b54      	ldr	r3, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x284>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fa6d 	bl	80010e0 <HAL_InitTick>
 8002c06:	4603      	mov	r3, r0
 8002c08:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d060      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	f000 bc27 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d039      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c1e:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a49      	ldr	r2, [pc, #292]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe faa9 	bl	8001180 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c30:	e00f      	b.n	8002c52 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c32:	f7fe faa5 	bl	8001180 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d908      	bls.n	8002c52 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c40:	4b41      	ldr	r3, [pc, #260]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	f000 bc09 	b.w	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0e9      	beq.n	8002c32 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a39      	ldr	r2, [pc, #228]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b37      	ldr	r3, [pc, #220]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	4934      	ldr	r1, [pc, #208]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	492f      	ldr	r1, [pc, #188]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	e020      	b.n	8002cd4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fa6f 	bl	8001180 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca4:	e00e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fa6b 	bl	8001180 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d907      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb4:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e3cf      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ea      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x1da>
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d07e      	beq.n	8002dde <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x226>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d10b      	bne.n	8002d0a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d06e      	beq.n	8002ddc <HAL_RCC_OscConfig+0x310>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d16a      	bne.n	8002ddc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e3ac      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x256>
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	e024      	b.n	8002d6c <HAL_RCC_OscConfig+0x2a0>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d2a:	d113      	bne.n	8002d54 <HAL_RCC_OscConfig+0x288>
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a02      	ldr	r2, [pc, #8]	; (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	e012      	b.n	8002d6c <HAL_RCC_OscConfig+0x2a0>
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000004 	.word	0x20000004
 8002d54:	4b8b      	ldr	r3, [pc, #556]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a8a      	ldr	r2, [pc, #552]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a87      	ldr	r2, [pc, #540]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d019      	beq.n	8002da8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa04 	bl	8001180 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d7a:	e00e      	b.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fa00 	bl	8001180 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d907      	bls.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8a:	4b7e      	ldr	r3, [pc, #504]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e364      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ea      	beq.n	8002d7c <HAL_RCC_OscConfig+0x2b0>
 8002da6:	e01a      	b.n	8002dde <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe f9ea 	bl	8001180 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	e00e      	b.n	8002dce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe f9e6 	bl	8001180 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d907      	bls.n	8002dce <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e34a      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	4b6d      	ldr	r3, [pc, #436]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ea      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2e4>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_OscConfig+0x330>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b0c      	cmp	r3, #12
 8002df4:	d119      	bne.n	8002e2a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d116      	bne.n	8002e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_OscConfig+0x348>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e327      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	4958      	ldr	r1, [pc, #352]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e28:	e04c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d029      	beq.n	8002e86 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a53      	ldr	r2, [pc, #332]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f99f 	bl	8001180 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e44:	e00e      	b.n	8002e64 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe f99b 	bl	8001180 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d907      	bls.n	8002e64 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e54:	4b4b      	ldr	r3, [pc, #300]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e2ff      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e64:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ea      	beq.n	8002e46 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4941      	ldr	r1, [pc, #260]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	e01e      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b3f      	ldr	r3, [pc, #252]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3e      	ldr	r2, [pc, #248]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe f975 	bl	8001180 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e98:	e00e      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe f971 	bl	8001180 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d907      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e2d5      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ea      	bne.n	8002e9a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d062      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d038      	beq.n	8002f4a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d108      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ee0:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	4a27      	ldr	r2, [pc, #156]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f023 0310 	bic.w	r3, r3, #16
 8002eec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ef0:	e007      	b.n	8002f02 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f043 0310 	orr.w	r3, r3, #16
 8002efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe f935 	bl	8001180 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f18:	e00f      	b.n	8002f3a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fe f931 	bl	8001180 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b07      	cmp	r3, #7
 8002f26:	d908      	bls.n	8002f3a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e294      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3a:	4b12      	ldr	r3, [pc, #72]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0e8      	beq.n	8002f1a <HAL_RCC_OscConfig+0x44e>
 8002f48:	e025      	b.n	8002f96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe f911 	bl	8001180 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f60:	e012      	b.n	8002f88 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe f90d 	bl	8001180 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d90b      	bls.n	8002f88 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <HAL_RCC_OscConfig+0x4b8>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e270      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f88:	4ba8      	ldr	r3, [pc, #672]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 812d 	beq.w	80031fe <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fa8:	4ba0      	ldr	r3, [pc, #640]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb4:	4b9d      	ldr	r3, [pc, #628]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	4a9c      	ldr	r2, [pc, #624]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8002fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc0:	4b9a      	ldr	r3, [pc, #616]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd0:	4b97      	ldr	r3, [pc, #604]	; (8003230 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4b94      	ldr	r3, [pc, #592]	; (8003230 <HAL_RCC_OscConfig+0x764>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a93      	ldr	r2, [pc, #588]	; (8003230 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f8ca 	bl	8001180 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fee:	e00e      	b.n	800300e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f8c6 	bl	8001180 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d907      	bls.n	800300e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffe:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x764>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e22a      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800300e:	4b88      	ldr	r3, [pc, #544]	; (8003230 <HAL_RCC_OscConfig+0x764>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ea      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d01f      	beq.n	8003066 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003032:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	4a7c      	ldr	r2, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800303a:	f043 0304 	orr.w	r3, r3, #4
 800303e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003042:	4b7a      	ldr	r3, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a78      	ldr	r2, [pc, #480]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003052:	e018      	b.n	8003086 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003054:	4b75      	ldr	r3, [pc, #468]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	4a74      	ldr	r2, [pc, #464]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003064:	e00f      	b.n	8003086 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003066:	4b71      	ldr	r3, [pc, #452]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	4a6f      	ldr	r2, [pc, #444]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003076:	4b6d      	ldr	r3, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	4a6b      	ldr	r2, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d068      	beq.n	8003160 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f877 	bl	8001180 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	e011      	b.n	80030ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f873 	bl	8001180 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d908      	bls.n	80030ba <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1d4      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0e6      	beq.n	8003096 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d022      	beq.n	800311a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a54      	ldr	r2, [pc, #336]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030e4:	e011      	b.n	800310a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fe f84b 	bl	8001180 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d908      	bls.n	800310a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1ac      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800310a:	4b48      	ldr	r3, [pc, #288]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0e6      	beq.n	80030e6 <HAL_RCC_OscConfig+0x61a>
 8003118:	e068      	b.n	80031ec <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800312a:	e011      	b.n	8003150 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe f828 	bl	8001180 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d908      	bls.n	8003150 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e189      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1e6      	bne.n	800312c <HAL_RCC_OscConfig+0x660>
 800315e:	e045      	b.n	80031ec <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe f80e 	bl	8001180 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003166:	e011      	b.n	800318c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe f80a 	bl	8001180 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d908      	bls.n	800318c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e16b      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800318c:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1e6      	bne.n	8003168 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d021      	beq.n	80031ec <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031b8:	e011      	b.n	80031de <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fd ffe1 	bl	8001180 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d908      	bls.n	80031de <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e142      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e6      	bne.n	80031ba <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d105      	bne.n	80031fe <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	4a0d      	ldr	r2, [pc, #52]	; (800322c <HAL_RCC_OscConfig+0x760>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d04f      	beq.n	80032aa <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d028      	beq.n	8003264 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x760>)
 8003214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_RCC_OscConfig+0x760>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fd ffad 	bl	8001180 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x788>
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003234:	f7fd ffa4 	bl	8001180 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d908      	bls.n	8003254 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003242:	4b8a      	ldr	r3, [pc, #552]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 8003244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e107      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003254:	4b85      	ldr	r3, [pc, #532]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 8003256:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0e8      	beq.n	8003234 <HAL_RCC_OscConfig+0x768>
 8003262:	e022      	b.n	80032aa <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003264:	4b81      	ldr	r3, [pc, #516]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 8003266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800326a:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003274:	f7fd ff84 	bl	8001180 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800327a:	e00f      	b.n	800329c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327c:	f7fd ff80 	bl	8001180 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d908      	bls.n	800329c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800328a:	4b78      	ldr	r3, [pc, #480]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800328c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0e3      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329c:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800329e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e8      	bne.n	800327c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80d7 	beq.w	8003462 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	4b6d      	ldr	r3, [pc, #436]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	f000 8091 	beq.w	80033e4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d166      	bne.n	8003398 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b68      	ldr	r3, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a67      	ldr	r2, [pc, #412]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80032d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fd ff53 	bl	8001180 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032dc:	e00e      	b.n	80032fc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fd ff4f 	bl	8001180 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d907      	bls.n	80032fc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ec:	4b5f      	ldr	r3, [pc, #380]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0b3      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032fc:	4b5b      	ldr	r3, [pc, #364]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ea      	bne.n	80032de <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003308:	4b58      	ldr	r3, [pc, #352]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x9a4>)
 800330e:	4013      	ands	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003318:	3a01      	subs	r2, #1
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	4311      	orrs	r1, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003322:	0212      	lsls	r2, r2, #8
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800332a:	0852      	lsrs	r2, r2, #1
 800332c:	3a01      	subs	r2, #1
 800332e:	0552      	lsls	r2, r2, #21
 8003330:	4311      	orrs	r1, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0652      	lsls	r2, r2, #25
 800333c:	4311      	orrs	r1, r2
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003342:	06d2      	lsls	r2, r2, #27
 8003344:	430a      	orrs	r2, r1
 8003346:	4949      	ldr	r1, [pc, #292]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a46      	ldr	r2, [pc, #280]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 8003352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003358:	4b44      	ldr	r3, [pc, #272]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fd ff0c 	bl	8001180 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	e00e      	b.n	800338a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd ff08 	bl	8001180 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d907      	bls.n	800338a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800337a:	4b3c      	ldr	r3, [pc, #240]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e06c      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ea      	beq.n	800336c <HAL_RCC_OscConfig+0x8a0>
 8003396:	e064      	b.n	8003462 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a33      	ldr	r2, [pc, #204]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 800339e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fd feec 	bl	8001180 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033aa:	e00e      	b.n	80033ca <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd fee8 	bl	8001180 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d907      	bls.n	80033ca <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e04c      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1ea      	bne.n	80033ac <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033d6:	4b25      	ldr	r3, [pc, #148]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4924      	ldr	r1, [pc, #144]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_OscConfig+0x9a8>)
 80033de:	4013      	ands	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
 80033e2:	e03e      	b.n	8003462 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e039      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_RCC_OscConfig+0x9a0>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	429a      	cmp	r2, r3
 8003402:	d12c      	bne.n	800345e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	3b01      	subs	r3, #1
 8003410:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d123      	bne.n	800345e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d11b      	bne.n	800345e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d113      	bne.n	800345e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d109      	bne.n	800345e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	3b01      	subs	r3, #1
 8003458:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800345a:	429a      	cmp	r2, r3
 800345c:	d001      	beq.n	8003462 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3720      	adds	r7, #32
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	019f800c 	.word	0x019f800c
 8003474:	feeefffc 	.word	0xfeeefffc

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e11c      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b90      	ldr	r3, [pc, #576]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d910      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 020f 	bic.w	r2, r3, #15
 80034a6:	498b      	ldr	r1, [pc, #556]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e104      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d8:	429a      	cmp	r2, r3
 80034da:	d908      	bls.n	80034ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	497b      	ldr	r1, [pc, #492]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8085 	beq.w	8003606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d11f      	bne.n	8003544 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003504:	4b74      	ldr	r3, [pc, #464]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0da      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003514:	f000 fa26 	bl	8003964 <RCC_GetSysClockFreqFromPLLSource>
 8003518:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	4a6f      	ldr	r2, [pc, #444]	; (80036dc <HAL_RCC_ClockConfig+0x264>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d947      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003522:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d141      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800352e:	4b6a      	ldr	r3, [pc, #424]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003536:	4a68      	ldr	r2, [pc, #416]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e036      	b.n	80035b2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d107      	bne.n	800355c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800354c:	4b62      	ldr	r3, [pc, #392]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d115      	bne.n	8003584 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0b6      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003564:	4b5c      	ldr	r3, [pc, #368]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d109      	bne.n	8003584 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0aa      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003574:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0a2      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003584:	f000 f8b0 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8003588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4a53      	ldr	r2, [pc, #332]	; (80036dc <HAL_RCC_ClockConfig+0x264>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d90f      	bls.n	80035b2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003592:	4b51      	ldr	r3, [pc, #324]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800359e:	4b4e      	ldr	r3, [pc, #312]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a6:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b49      	ldr	r3, [pc, #292]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4946      	ldr	r1, [pc, #280]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fd fddc 	bl	8001180 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fd fdd8 	bl	8001180 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d90a      	bls.n	80035f4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b3e      	ldr	r3, [pc, #248]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e06a      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f4:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 020c 	and.w	r2, r3, #12
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	429a      	cmp	r2, r3
 8003604:	d1e2      	bne.n	80035cc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d105      	bne.n	8003618 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003616:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d010      	beq.n	8003646 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003630:	429a      	cmp	r2, r3
 8003632:	d208      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4925      	ldr	r1, [pc, #148]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003646:	4b23      	ldr	r3, [pc, #140]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d210      	bcs.n	8003676 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 020f 	bic.w	r2, r3, #15
 800365c:	491d      	ldr	r1, [pc, #116]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_ClockConfig+0x25c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d001      	beq.n	8003676 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e029      	b.n	80036ca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4912      	ldr	r1, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x260>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036b4:	f000 f8b6 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x268>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd fd0c 	bl	80010e0 <HAL_InitTick>
 80036c8:	4603      	mov	r3, r0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	04c4b400 	.word	0x04c4b400
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000004 	.word	0x20000004

080036e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b44      	ldr	r3, [pc, #272]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x34>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d121      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d11e      	bne.n	800375a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800371c:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003728:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e005      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003744:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_RCC_GetSysClockFreq+0x130>)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d102      	bne.n	8003766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003760:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCC_GetSysClockFreq+0x134>)
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	e004      	b.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d101      	bne.n	8003770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 800376e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0c      	cmp	r3, #12
 8003774:	d146      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3301      	adds	r3, #1
 800378c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d003      	beq.n	800379c <HAL_RCC_GetSysClockFreq+0xb4>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b03      	cmp	r3, #3
 8003798:	d00d      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0xce>
 800379a:	e019      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379c:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_RCC_GetSysClockFreq+0x134>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037a6:	68d2      	ldr	r2, [r2, #12]
 80037a8:	0a12      	lsrs	r2, r2, #8
 80037aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e019      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b6:	4a1a      	ldr	r2, [pc, #104]	; (8003820 <HAL_RCC_GetSysClockFreq+0x138>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	0a12      	lsrs	r2, r2, #8
 80037c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]
        break;
 80037ce:	e00c      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037da:	68d2      	ldr	r2, [r2, #12]
 80037dc:	0a12      	lsrs	r2, r2, #8
 80037de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037e2:	fb02 f303 	mul.w	r3, r2, r3
 80037e6:	617b      	str	r3, [r7, #20]
        break;
 80037e8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_GetSysClockFreq+0x12c>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	0e5b      	lsrs	r3, r3, #25
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	3301      	adds	r3, #1
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003804:	69bb      	ldr	r3, [r7, #24]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3724      	adds	r7, #36	; 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	08005828 	.word	0x08005828
 800381c:	00f42400 	.word	0x00f42400
 8003820:	007a1200 	.word	0x007a1200

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003828:	f7ff ff5e 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetHCLKFreq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetHCLKFreq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	08005810 	.word	0x08005810

0800384c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003850:	f7ff ffe8 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000
 8003870:	08005820 	.word	0x08005820

08003874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003878:	f7ff ffd4 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	; (8003894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000
 8003898:	08005820 	.word	0x08005820

0800389c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038b4:	f7ff f86c 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 80038b8:	6138      	str	r0, [r7, #16]
 80038ba:	e014      	b.n	80038e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6593      	str	r3, [r2, #88]	; 0x58
 80038c8:	4b24      	ldr	r3, [pc, #144]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038d4:	f7ff f85c 	bl	8002990 <HAL_PWREx_GetVoltageRange>
 80038d8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4a1f      	ldr	r2, [pc, #124]	; (800395c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f2:	d10b      	bne.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d919      	bls.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2ba0      	cmp	r3, #160	; 0xa0
 80038fe:	d902      	bls.n	8003906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003900:	2302      	movs	r3, #2
 8003902:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003904:	e013      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800390a:	e010      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b80      	cmp	r3, #128	; 0x80
 8003910:	d902      	bls.n	8003918 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003912:	2303      	movs	r3, #3
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e00a      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d102      	bne.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800391e:	2302      	movs	r3, #2
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e004      	b.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b70      	cmp	r3, #112	; 0x70
 8003928:	d101      	bne.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 020f 	bic.w	r2, r3, #15
 8003936:	490a      	ldr	r1, [pc, #40]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40022000 	.word	0x40022000

08003964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003974:	4b2e      	ldr	r3, [pc, #184]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	091b      	lsrs	r3, r3, #4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3301      	adds	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d015      	beq.n	80039b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d839      	bhi.n	8003a02 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d01c      	beq.n	80039ce <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d133      	bne.n	8003a02 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399a:	4a26      	ldr	r2, [pc, #152]	; (8003a34 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	0a12      	lsrs	r2, r2, #8
 80039a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      break;
 80039b2:	e029      	b.n	8003a08 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b4:	4a20      	ldr	r2, [pc, #128]	; (8003a38 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039be:	68d2      	ldr	r2, [r2, #12]
 80039c0:	0a12      	lsrs	r2, r2, #8
 80039c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	e01c      	b.n	8003a08 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e005      	b.n	80039f6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80039f6:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	613b      	str	r3, [r7, #16]
        break;
 8003a00:	e002      	b.n	8003a08 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
      break;
 8003a06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0e5b      	lsrs	r3, r3, #25
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	3301      	adds	r3, #1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003a22:	683b      	ldr	r3, [r7, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40021000 	.word	0x40021000
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	08005828 	.word	0x08005828

08003a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d040      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a60:	2b80      	cmp	r3, #128	; 0x80
 8003a62:	d02a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d825      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a68:	2b60      	cmp	r3, #96	; 0x60
 8003a6a:	d026      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003a6c:	2b60      	cmp	r3, #96	; 0x60
 8003a6e:	d821      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	d006      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d81d      	bhi.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d010      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003a80:	e018      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a82:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	4a8e      	ldr	r2, [pc, #568]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003a8e:	e015      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fb56 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003aa0:	e00c      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3320      	adds	r3, #32
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fc33 	bl	8004314 <RCCEx_PLLSAI2_Config>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
        break;
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac2:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad0:	497b      	ldr	r1, [pc, #492]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ad8:	e001      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	7ffb      	ldrb	r3, [r7, #31]
 8003adc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d047      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d030      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af8:	d82a      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afe:	d02a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b04:	d824      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b10:	d81e      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1a:	d010      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003b1c:	e018      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b1e:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a67      	ldr	r2, [pc, #412]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b28:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb08 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b3c:	e00c      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3320      	adds	r3, #32
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fbe5 	bl	8004314 <RCCEx_PLLSAI2_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
        break;
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	7ffb      	ldrb	r3, [r7, #31]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b5e:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	4954      	ldr	r1, [pc, #336]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003b74:	e001      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	7ffb      	ldrb	r3, [r7, #31]
 8003b78:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80ab 	beq.w	8003cde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8c:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba4:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd fade 	bl	8001180 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc6:	e00f      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7fd fada 	bl	8001180 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d908      	bls.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd6:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003be6:	e006      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be8:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0e9      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003bf6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003bf8:	7ffb      	ldrb	r3, [r7, #31]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d164      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bfe:	4b30      	ldr	r3, [pc, #192]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c08:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d019      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c28:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3e:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01f      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fa91 	bl	8001180 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c60:	e012      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd fa8d 	bl	8001180 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d909      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003c86:	e007      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c88:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0e5      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003c98:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003c9a:	7ffb      	ldrb	r3, [r7, #31]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10c      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	4903      	ldr	r1, [pc, #12]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cb8:	e008      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cba:	7ffb      	ldrb	r3, [r7, #31]
 8003cbc:	77bb      	strb	r3, [r7, #30]
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
 8003cca:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd2:	4b9c      	ldr	r3, [pc, #624]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	4a9b      	ldr	r2, [pc, #620]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cea:	4b96      	ldr	r3, [pc, #600]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f023 0203 	bic.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	4992      	ldr	r1, [pc, #584]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d0c:	4b8d      	ldr	r3, [pc, #564]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	f023 020c 	bic.w	r2, r3, #12
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	498a      	ldr	r1, [pc, #552]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d2e:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	4981      	ldr	r1, [pc, #516]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d50:	4b7c      	ldr	r3, [pc, #496]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4979      	ldr	r1, [pc, #484]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d72:	4b74      	ldr	r3, [pc, #464]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	4970      	ldr	r1, [pc, #448]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d94:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	4968      	ldr	r1, [pc, #416]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db6:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	495f      	ldr	r1, [pc, #380]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd8:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de6:	4957      	ldr	r1, [pc, #348]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003dfa:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e08:	494e      	ldr	r1, [pc, #312]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d031      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e24:	d00e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e2a:	d814      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e34:	d10f      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4a42      	ldr	r2, [pc, #264]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e40:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f97c 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	77fb      	strb	r3, [r7, #31]
        break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e64:	4b37      	ldr	r3, [pc, #220]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e72:	4934      	ldr	r1, [pc, #208]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e7a:	e001      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	7ffb      	ldrb	r3, [r7, #31]
 8003e7e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	492a      	ldr	r1, [pc, #168]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eae:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	4921      	ldr	r1, [pc, #132]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	4919      	ldr	r1, [pc, #100]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef8:	f023 0203 	bic.w	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	4910      	ldr	r1, [pc, #64]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02b      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	4908      	ldr	r1, [pc, #32]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d109      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a02      	ldr	r2, [pc, #8]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
 8003f40:	e014      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d10c      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f8f5 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003f68:	7ffb      	ldrb	r3, [r7, #31]
 8003f6a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d04a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f80:	d108      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003f82:	4b70      	ldr	r3, [pc, #448]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f88:	4a6e      	ldr	r2, [pc, #440]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003f92:	e012      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003f94:	4b6b      	ldr	r3, [pc, #428]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	4968      	ldr	r1, [pc, #416]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003faa:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb0:	4a64      	ldr	r2, [pc, #400]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f8bc 	bl	8004148 <RCCEx_PLLSAI1_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d019      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003fda:	7ffb      	ldrb	r3, [r7, #31]
 8003fdc:	77bb      	strb	r3, [r7, #30]
 8003fde:	e016      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fe8:	d106      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fea:	4b56      	ldr	r3, [pc, #344]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	4a55      	ldr	r2, [pc, #340]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff4:	60d3      	str	r3, [r2, #12]
 8003ff6:	e00a      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004000:	d105      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004002:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004028:	4946      	ldr	r1, [pc, #280]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004038:	d106      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800403a:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a41      	ldr	r2, [pc, #260]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004044:	60d3      	str	r3, [r2, #12]
 8004046:	e011      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f875 	bl	8004148 <RCCEx_PLLSAI1_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004062:	7ffb      	ldrb	r3, [r7, #31]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004068:	7ffb      	ldrb	r3, [r7, #31]
 800406a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004078:	4b32      	ldr	r3, [pc, #200]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004088:	492e      	ldr	r1, [pc, #184]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800409a:	d10c      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	2102      	movs	r1, #2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f850 	bl	8004148 <RCCEx_PLLSAI1_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80040ac:	7ffb      	ldrb	r3, [r7, #31]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80040b2:	7ffb      	ldrb	r3, [r7, #31]
 80040b4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c8:	f023 0204 	bic.w	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d2:	491c      	ldr	r1, [pc, #112]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040e6:	4b17      	ldr	r3, [pc, #92]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	f023 0218 	bic.w	r2, r3, #24
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	4913      	ldr	r1, [pc, #76]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800410c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411a:	490a      	ldr	r1, [pc, #40]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800412c:	d105      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004138:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800413a:	7fbb      	ldrb	r3, [r7, #30]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000

08004148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d018      	beq.n	8004190 <RCCEx_PLLSAI1_Config+0x48>
 800415e:	2b03      	cmp	r3, #3
 8004160:	d81f      	bhi.n	80041a2 <RCCEx_PLLSAI1_Config+0x5a>
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <RCCEx_PLLSAI1_Config+0x24>
 8004166:	2b02      	cmp	r3, #2
 8004168:	d009      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x36>
 800416a:	e01a      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800416c:	4b65      	ldr	r3, [pc, #404]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d117      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e014      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800417e:	4b61      	ldr	r3, [pc, #388]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d110      	bne.n	80041ac <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418e:	e00d      	b.n	80041ac <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004190:	4b5c      	ldr	r3, [pc, #368]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a0:	e006      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
      break;
 80041a6:	e004      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80041b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f040 809f 	bne.w	80042f8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041ba:	4b52      	ldr	r3, [pc, #328]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a51      	ldr	r2, [pc, #324]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c6:	f7fc ffdb 	bl	8001180 <HAL_GetTick>
 80041ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041cc:	e00f      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ce:	f7fc ffd7 	bl	8001180 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d908      	bls.n	80041ee <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041dc:	4b49      	ldr	r3, [pc, #292]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041ec:	e006      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041ee:	4b45      	ldr	r3, [pc, #276]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e9      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0x86>
 80041fa:	e000      	b.n	80041fe <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80041fc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d179      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800420a:	4b3e      	ldr	r3, [pc, #248]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6892      	ldr	r2, [r2, #8]
 8004216:	0211      	lsls	r1, r2, #8
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	68d2      	ldr	r2, [r2, #12]
 800421c:	06d2      	lsls	r2, r2, #27
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6852      	ldr	r2, [r2, #4]
 8004224:	3a01      	subs	r2, #1
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	4934      	ldr	r1, [pc, #208]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	610b      	str	r3, [r1, #16]
 8004236:	e033      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d118      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	4b32      	ldr	r3, [pc, #200]	; (800430c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6892      	ldr	r2, [r2, #8]
 800424a:	0211      	lsls	r1, r2, #8
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6912      	ldr	r2, [r2, #16]
 8004250:	0852      	lsrs	r2, r2, #1
 8004252:	3a01      	subs	r2, #1
 8004254:	0552      	lsls	r2, r2, #21
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6852      	ldr	r2, [r2, #4]
 800425c:	3a01      	subs	r2, #1
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	4926      	ldr	r1, [pc, #152]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
 800426e:	e017      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	4b26      	ldr	r3, [pc, #152]	; (8004310 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	0211      	lsls	r1, r2, #8
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6952      	ldr	r2, [r2, #20]
 8004282:	0852      	lsrs	r2, r2, #1
 8004284:	3a01      	subs	r2, #1
 8004286:	0652      	lsls	r2, r2, #25
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6852      	ldr	r2, [r2, #4]
 800428e:	3a01      	subs	r2, #1
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	491a      	ldr	r1, [pc, #104]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a17      	ldr	r2, [pc, #92]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fc ff68 	bl	8001180 <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b2:	e00f      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042b4:	f7fc ff64 	bl	8001180 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d908      	bls.n	80042d4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80042d2:	e006      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0e9      	beq.n	80042b4 <RCCEx_PLLSAI1_Config+0x16c>
 80042e0:	e000      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80042e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	4904      	ldr	r1, [pc, #16]	; (8004304 <RCCEx_PLLSAI1_Config+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40021000 	.word	0x40021000
 8004308:	07ff800c 	.word	0x07ff800c
 800430c:	ff9f800c 	.word	0xff9f800c
 8004310:	f9ff800c 	.word	0xf9ff800c

08004314 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d018      	beq.n	800435c <RCCEx_PLLSAI2_Config+0x48>
 800432a:	2b03      	cmp	r3, #3
 800432c:	d81f      	bhi.n	800436e <RCCEx_PLLSAI2_Config+0x5a>
 800432e:	2b01      	cmp	r3, #1
 8004330:	d002      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x24>
 8004332:	2b02      	cmp	r3, #2
 8004334:	d009      	beq.n	800434a <RCCEx_PLLSAI2_Config+0x36>
 8004336:	e01a      	b.n	800436e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004338:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d117      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004348:	e014      	b.n	8004374 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800434a:	4b46      	ldr	r3, [pc, #280]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435a:	e00d      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800435c:	4b41      	ldr	r3, [pc, #260]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d109      	bne.n	800437c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436c:	e006      	b.n	800437c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
      break;
 8004372:	e004      	b.n	800437e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800437c:	bf00      	nop
  }

  if (status == HAL_OK)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d169      	bne.n	8004458 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004384:	4b37      	ldr	r3, [pc, #220]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a36      	ldr	r2, [pc, #216]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004390:	f7fc fef6 	bl	8001180 <HAL_GetTick>
 8004394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004396:	e00f      	b.n	80043b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004398:	f7fc fef2 	bl	8001180 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d908      	bls.n	80043b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043a6:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80043b6:	e006      	b.n	80043c6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e9      	bne.n	8004398 <RCCEx_PLLSAI2_Config+0x84>
 80043c4:	e000      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80043c6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d144      	bne.n	8004458 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d115      	bne.n	8004400 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	4b23      	ldr	r3, [pc, #140]	; (8004468 <RCCEx_PLLSAI2_Config+0x154>)
 80043da:	4013      	ands	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6892      	ldr	r2, [r2, #8]
 80043e0:	0211      	lsls	r1, r2, #8
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	06d2      	lsls	r2, r2, #27
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6852      	ldr	r2, [r2, #4]
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	491a      	ldr	r1, [pc, #104]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fc feb8 	bl	8001180 <HAL_GetTick>
 8004410:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004412:	e00f      	b.n	8004434 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004414:	f7fc feb4 	bl	8001180 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d908      	bls.n	8004434 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d109      	bne.n	8004442 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004432:	e006      	b.n	8004442 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0e9      	beq.n	8004414 <RCCEx_PLLSAI2_Config+0x100>
 8004440:	e000      	b.n	8004444 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004442:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	4904      	ldr	r1, [pc, #16]	; (8004464 <RCCEx_PLLSAI2_Config+0x150>)
 8004454:	4313      	orrs	r3, r2
 8004456:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	07ff800c 	.word	0x07ff800c

0800446c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d066      	beq.n	800454c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fc50 	bl	8000d38 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d045      	beq.n	800453a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ae:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <HAL_RTC_Init+0xec>)
 80044b0:	22ca      	movs	r2, #202	; 0xca
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_RTC_Init+0xec>)
 80044b6:	2253      	movs	r2, #83	; 0x53
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f872 	bl	80045a4 <RTC_EnterInitMode>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d121      	bne.n	800450e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80044ca:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_RTC_Init+0xec>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	4a22      	ldr	r2, [pc, #136]	; (8004558 <HAL_RTC_Init+0xec>)
 80044d0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <HAL_RTC_Init+0xec>)
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	4319      	orrs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	491a      	ldr	r1, [pc, #104]	; (8004558 <HAL_RTC_Init+0xec>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	041b      	lsls	r3, r3, #16
 80044fe:	4916      	ldr	r1, [pc, #88]	; (8004558 <HAL_RTC_Init+0xec>)
 8004500:	4313      	orrs	r3, r2
 8004502:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f881 	bl	800460c <RTC_ExitInitMode>
 800450a:	4603      	mov	r3, r0
 800450c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10e      	bne.n	8004532 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <HAL_RTC_Init+0xec>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a19      	ldr	r1, [r3, #32]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	4319      	orrs	r1, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	430b      	orrs	r3, r1
 800452c:	490a      	ldr	r1, [pc, #40]	; (8004558 <HAL_RTC_Init+0xec>)
 800452e:	4313      	orrs	r3, r2
 8004530:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RTC_Init+0xec>)
 8004534:	22ff      	movs	r2, #255	; 0xff
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
 8004538:	e001      	b.n	800453e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40002800 	.word	0x40002800

0800455c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <HAL_RTC_WaitForSynchro+0x40>)
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <HAL_RTC_WaitForSynchro+0x44>)
 8004568:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800456a:	f7fc fe09 	bl	8001180 <HAL_GetTick>
 800456e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004570:	e009      	b.n	8004586 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004572:	f7fc fe05 	bl	8001180 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004580:	d901      	bls.n	8004586 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e006      	b.n	8004594 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RTC_WaitForSynchro+0x40>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ef      	beq.n	8004572 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40002800 	.word	0x40002800
 80045a0:	0001005c 	.word	0x0001005c

080045a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80045b0:	4b15      	ldr	r3, [pc, #84]	; (8004608 <RTC_EnterInitMode+0x64>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d120      	bne.n	80045fe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <RTC_EnterInitMode+0x64>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <RTC_EnterInitMode+0x64>)
 80045c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80045c8:	f7fc fdda 	bl	8001180 <HAL_GetTick>
 80045cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045ce:	e00d      	b.n	80045ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045d0:	f7fc fdd6 	bl	8001180 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045de:	d905      	bls.n	80045ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2203      	movs	r2, #3
 80045e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <RTC_EnterInitMode+0x64>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <RTC_EnterInitMode+0x5a>
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d1e8      	bne.n	80045d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40002800 	.word	0x40002800

0800460c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <RTC_ExitInitMode+0x78>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <RTC_ExitInitMode+0x78>)
 800461e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004622:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004624:	4b17      	ldr	r3, [pc, #92]	; (8004684 <RTC_ExitInitMode+0x78>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10c      	bne.n	800464a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff93 	bl	800455c <HAL_RTC_WaitForSynchro>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01e      	beq.n	800467a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2203      	movs	r2, #3
 8004640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	73fb      	strb	r3, [r7, #15]
 8004648:	e017      	b.n	800467a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <RTC_ExitInitMode+0x78>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <RTC_ExitInitMode+0x78>)
 8004650:	f023 0320 	bic.w	r3, r3, #32
 8004654:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff80 	bl	800455c <HAL_RTC_WaitForSynchro>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800466e:	4b05      	ldr	r3, [pc, #20]	; (8004684 <RTC_ExitInitMode+0x78>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4a04      	ldr	r2, [pc, #16]	; (8004684 <RTC_ExitInitMode+0x78>)
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6193      	str	r3, [r2, #24]
  }

  return status;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40002800 	.word	0x40002800

08004688 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	490f      	ldr	r1, [pc, #60]	; (80046d8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800469c:	4313      	orrs	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	490c      	ldr	r1, [pc, #48]	; (80046dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6919      	ldr	r1, [r3, #16]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	430b      	orrs	r3, r1
 80046c2:	4906      	ldr	r1, [pc, #24]	; (80046dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40002800 	.word	0x40002800
 80046dc:	40003400 	.word	0x40003400

080046e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e042      	b.n	8004778 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7fc fab7 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2224      	movs	r2, #36	; 0x24
 800470e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f82c 	bl	8004780 <UART_SetConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e022      	b.n	8004778 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fb20 	bl	8004d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800474e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800475e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fba7 	bl	8004ec4 <UART_CheckIdleState>
 8004776:	4603      	mov	r3, r0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004784:	b08c      	sub	sp, #48	; 0x30
 8004786:	af00      	add	r7, sp, #0
 8004788:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	431a      	orrs	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	431a      	orrs	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4baa      	ldr	r3, [pc, #680]	; (8004a58 <UART_SetConfig+0x2d8>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a9f      	ldr	r2, [pc, #636]	; (8004a5c <UART_SetConfig+0x2dc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004800:	430b      	orrs	r3, r1
 8004802:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 010f 	bic.w	r1, r3, #15
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a90      	ldr	r2, [pc, #576]	; (8004a60 <UART_SetConfig+0x2e0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d125      	bne.n	8004870 <UART_SetConfig+0xf0>
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <UART_SetConfig+0x2e4>)
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b03      	cmp	r3, #3
 8004830:	d81a      	bhi.n	8004868 <UART_SetConfig+0xe8>
 8004832:	a201      	add	r2, pc, #4	; (adr r2, 8004838 <UART_SetConfig+0xb8>)
 8004834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004838:	08004849 	.word	0x08004849
 800483c:	08004859 	.word	0x08004859
 8004840:	08004851 	.word	0x08004851
 8004844:	08004861 	.word	0x08004861
 8004848:	2301      	movs	r3, #1
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484e:	e116      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e112      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e10e      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e10a      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e106      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a7c      	ldr	r2, [pc, #496]	; (8004a68 <UART_SetConfig+0x2e8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d138      	bne.n	80048ec <UART_SetConfig+0x16c>
 800487a:	4b7a      	ldr	r3, [pc, #488]	; (8004a64 <UART_SetConfig+0x2e4>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b0c      	cmp	r3, #12
 8004886:	d82d      	bhi.n	80048e4 <UART_SetConfig+0x164>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x110>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080048e5 	.word	0x080048e5
 8004898:	080048e5 	.word	0x080048e5
 800489c:	080048e5 	.word	0x080048e5
 80048a0:	080048d5 	.word	0x080048d5
 80048a4:	080048e5 	.word	0x080048e5
 80048a8:	080048e5 	.word	0x080048e5
 80048ac:	080048e5 	.word	0x080048e5
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	080048e5 	.word	0x080048e5
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ca:	e0d8      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e0d4      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e0d0      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e0cc      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e0c8      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <UART_SetConfig+0x2ec>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d125      	bne.n	8004942 <UART_SetConfig+0x1c2>
 80048f6:	4b5b      	ldr	r3, [pc, #364]	; (8004a64 <UART_SetConfig+0x2e4>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004900:	2b30      	cmp	r3, #48	; 0x30
 8004902:	d016      	beq.n	8004932 <UART_SetConfig+0x1b2>
 8004904:	2b30      	cmp	r3, #48	; 0x30
 8004906:	d818      	bhi.n	800493a <UART_SetConfig+0x1ba>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d00a      	beq.n	8004922 <UART_SetConfig+0x1a2>
 800490c:	2b20      	cmp	r3, #32
 800490e:	d814      	bhi.n	800493a <UART_SetConfig+0x1ba>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <UART_SetConfig+0x19a>
 8004914:	2b10      	cmp	r3, #16
 8004916:	d008      	beq.n	800492a <UART_SetConfig+0x1aa>
 8004918:	e00f      	b.n	800493a <UART_SetConfig+0x1ba>
 800491a:	2300      	movs	r3, #0
 800491c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004920:	e0ad      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004922:	2302      	movs	r3, #2
 8004924:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004928:	e0a9      	b.n	8004a7e <UART_SetConfig+0x2fe>
 800492a:	2304      	movs	r3, #4
 800492c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004930:	e0a5      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004932:	2308      	movs	r3, #8
 8004934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004938:	e0a1      	b.n	8004a7e <UART_SetConfig+0x2fe>
 800493a:	2310      	movs	r3, #16
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004940:	e09d      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4a      	ldr	r2, [pc, #296]	; (8004a70 <UART_SetConfig+0x2f0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d125      	bne.n	8004998 <UART_SetConfig+0x218>
 800494c:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <UART_SetConfig+0x2e4>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004956:	2bc0      	cmp	r3, #192	; 0xc0
 8004958:	d016      	beq.n	8004988 <UART_SetConfig+0x208>
 800495a:	2bc0      	cmp	r3, #192	; 0xc0
 800495c:	d818      	bhi.n	8004990 <UART_SetConfig+0x210>
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d00a      	beq.n	8004978 <UART_SetConfig+0x1f8>
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d814      	bhi.n	8004990 <UART_SetConfig+0x210>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <UART_SetConfig+0x1f0>
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d008      	beq.n	8004980 <UART_SetConfig+0x200>
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x210>
 8004970:	2300      	movs	r3, #0
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e082      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e07e      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e07a      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e076      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e072      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <UART_SetConfig+0x2f4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d12a      	bne.n	80049f8 <UART_SetConfig+0x278>
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <UART_SetConfig+0x2e4>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d01a      	beq.n	80049e8 <UART_SetConfig+0x268>
 80049b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b6:	d81b      	bhi.n	80049f0 <UART_SetConfig+0x270>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d00c      	beq.n	80049d8 <UART_SetConfig+0x258>
 80049be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c2:	d815      	bhi.n	80049f0 <UART_SetConfig+0x270>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <UART_SetConfig+0x250>
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049cc:	d008      	beq.n	80049e0 <UART_SetConfig+0x260>
 80049ce:	e00f      	b.n	80049f0 <UART_SetConfig+0x270>
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e052      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80049d8:	2302      	movs	r3, #2
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e04e      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80049e0:	2304      	movs	r3, #4
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e6:	e04a      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80049e8:	2308      	movs	r3, #8
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ee:	e046      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f6:	e042      	b.n	8004a7e <UART_SetConfig+0x2fe>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a17      	ldr	r2, [pc, #92]	; (8004a5c <UART_SetConfig+0x2dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d13a      	bne.n	8004a78 <UART_SetConfig+0x2f8>
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <UART_SetConfig+0x2e4>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a10:	d01a      	beq.n	8004a48 <UART_SetConfig+0x2c8>
 8004a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a16:	d81b      	bhi.n	8004a50 <UART_SetConfig+0x2d0>
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1c:	d00c      	beq.n	8004a38 <UART_SetConfig+0x2b8>
 8004a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a22:	d815      	bhi.n	8004a50 <UART_SetConfig+0x2d0>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <UART_SetConfig+0x2b0>
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d008      	beq.n	8004a40 <UART_SetConfig+0x2c0>
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x2d0>
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a36:	e022      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	e01e      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004a40:	2304      	movs	r3, #4
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a46:	e01a      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4e:	e016      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004a50:	2310      	movs	r3, #16
 8004a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a56:	e012      	b.n	8004a7e <UART_SetConfig+0x2fe>
 8004a58:	cfff69f3 	.word	0xcfff69f3
 8004a5c:	40008000 	.word	0x40008000
 8004a60:	40013800 	.word	0x40013800
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40004400 	.word	0x40004400
 8004a6c:	40004800 	.word	0x40004800
 8004a70:	40004c00 	.word	0x40004c00
 8004a74:	40005000 	.word	0x40005000
 8004a78:	2310      	movs	r3, #16
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4ab0      	ldr	r2, [pc, #704]	; (8004d44 <UART_SetConfig+0x5c4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	f040 809b 	bne.w	8004bc0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d827      	bhi.n	8004ae2 <UART_SetConfig+0x362>
 8004a92:	a201      	add	r2, pc, #4	; (adr r2, 8004a98 <UART_SetConfig+0x318>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ac5 	.word	0x08004ac5
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ae3 	.word	0x08004ae3
 8004aa8:	08004ad3 	.word	0x08004ad3
 8004aac:	08004ae3 	.word	0x08004ae3
 8004ab0:	08004ae3 	.word	0x08004ae3
 8004ab4:	08004ae3 	.word	0x08004ae3
 8004ab8:	08004adb 	.word	0x08004adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004abc:	f7fe fec6 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ac2:	e014      	b.n	8004aee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7fe fed6 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aca:	e010      	b.n	8004aee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004acc:	4b9e      	ldr	r3, [pc, #632]	; (8004d48 <UART_SetConfig+0x5c8>)
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ad0:	e00d      	b.n	8004aee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad2:	f7fe fe09 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8004ad6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ad8:	e009      	b.n	8004aee <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ae0:	e005      	b.n	8004aee <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004aec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 8130 	beq.w	8004d56 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	4a94      	ldr	r2, [pc, #592]	; (8004d4c <UART_SetConfig+0x5cc>)
 8004afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	4413      	add	r3, r2
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d305      	bcc.n	8004b26 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d903      	bls.n	8004b2e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b2c:	e113      	b.n	8004d56 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	2200      	movs	r2, #0
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	60fa      	str	r2, [r7, #12]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4a84      	ldr	r2, [pc, #528]	; (8004d4c <UART_SetConfig+0x5cc>)
 8004b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2200      	movs	r2, #0
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b50:	f7fb fb70 	bl	8000234 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	020b      	lsls	r3, r1, #8
 8004b66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b6a:	0202      	lsls	r2, r0, #8
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	6849      	ldr	r1, [r1, #4]
 8004b70:	0849      	lsrs	r1, r1, #1
 8004b72:	2000      	movs	r0, #0
 8004b74:	460c      	mov	r4, r1
 8004b76:	4605      	mov	r5, r0
 8004b78:	eb12 0804 	adds.w	r8, r2, r4
 8004b7c:	eb43 0905 	adc.w	r9, r3, r5
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	469a      	mov	sl, r3
 8004b88:	4693      	mov	fp, r2
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	465b      	mov	r3, fp
 8004b8e:	4640      	mov	r0, r8
 8004b90:	4649      	mov	r1, r9
 8004b92:	f7fb fb4f 	bl	8000234 <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ba4:	d308      	bcc.n	8004bb8 <UART_SetConfig+0x438>
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bac:	d204      	bcs.n	8004bb8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a3a      	ldr	r2, [r7, #32]
 8004bb4:	60da      	str	r2, [r3, #12]
 8004bb6:	e0ce      	b.n	8004d56 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bbe:	e0ca      	b.n	8004d56 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	d166      	bne.n	8004c98 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004bca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d827      	bhi.n	8004c22 <UART_SetConfig+0x4a2>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x458>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004c05 	.word	0x08004c05
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c23 	.word	0x08004c23
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bfc:	f7fe fe26 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c02:	e014      	b.n	8004c2e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fe fe36 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0a:	e010      	b.n	8004c2e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b4e      	ldr	r3, [pc, #312]	; (8004d48 <UART_SetConfig+0x5c8>)
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fe fd69 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c18:	e009      	b.n	8004c2e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c20:	e005      	b.n	8004c2e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8090 	beq.w	8004d56 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	4a44      	ldr	r2, [pc, #272]	; (8004d4c <UART_SetConfig+0x5cc>)
 8004c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c40:	461a      	mov	r2, r3
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c48:	005a      	lsls	r2, r3, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	441a      	add	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d916      	bls.n	8004c90 <UART_SetConfig+0x510>
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d212      	bcs.n	8004c90 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f023 030f 	bic.w	r3, r3, #15
 8004c72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	8bfb      	ldrh	r3, [r7, #30]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	8bfa      	ldrh	r2, [r7, #30]
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	e062      	b.n	8004d56 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c96:	e05e      	b.n	8004d56 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d828      	bhi.n	8004cf2 <UART_SetConfig+0x572>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x528>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe fdbe 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cd2:	e014      	b.n	8004cfe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fe fdce 	bl	8003874 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004cda:	e010      	b.n	8004cfe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <UART_SetConfig+0x5c8>)
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ce0:	e00d      	b.n	8004cfe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fe fd01 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ce8:	e009      	b.n	8004cfe <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004cf0:	e005      	b.n	8004cfe <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d028      	beq.n	8004d56 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <UART_SetConfig+0x5cc>)
 8004d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	441a      	add	r2, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d910      	bls.n	8004d50 <UART_SetConfig+0x5d0>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d20c      	bcs.n	8004d50 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e009      	b.n	8004d56 <UART_SetConfig+0x5d6>
 8004d42:	bf00      	nop
 8004d44:	40008000 	.word	0x40008000
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	08005868 	.word	0x08005868
      }
      else
      {
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3730      	adds	r7, #48	; 0x30
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7e:	d10a      	bne.n	8004e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b098      	sub	sp, #96	; 0x60
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed4:	f7fc f954 	bl	8001180 <HAL_GetTick>
 8004ed8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d12f      	bne.n	8004f48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f88e 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d022      	beq.n	8004f48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f16:	653b      	str	r3, [r7, #80]	; 0x50
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f20:	647b      	str	r3, [r7, #68]	; 0x44
 8004f22:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e063      	b.n	8005010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d149      	bne.n	8004fea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f857 	bl	8005018 <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d03c      	beq.n	8004fea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f90:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e6      	bne.n	8004f70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	e853 3f00 	ldrex	r3, [r3]
 8004fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc2:	61fa      	str	r2, [r7, #28]
 8004fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc6:	69b9      	ldr	r1, [r7, #24]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	617b      	str	r3, [r7, #20]
   return(result);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e5      	bne.n	8004fa2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e012      	b.n	8005010 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3758      	adds	r7, #88	; 0x58
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005028:	e049      	b.n	80050be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d045      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fc f8a5 	bl	8001180 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <UART_WaitOnFlagUntilTimeout+0x30>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e048      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d031      	beq.n	80050be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b08      	cmp	r3, #8
 8005066:	d110      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f838 	bl	80050e6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2208      	movs	r2, #8
 800507a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e029      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005098:	d111      	bne.n	80050be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f81e 	bl	80050e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e00f      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	bf0c      	ite	eq
 80050ce:	2301      	moveq	r3, #1
 80050d0:	2300      	movne	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d0a6      	beq.n	800502a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b095      	sub	sp, #84	; 0x54
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	643b      	str	r3, [r7, #64]	; 0x40
 800510e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	64bb      	str	r3, [r7, #72]	; 0x48
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3308      	adds	r3, #8
 8005142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005144:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e3      	bne.n	8005120 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d118      	bne.n	8005192 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60bb      	str	r3, [r7, #8]
   return(result);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	647b      	str	r3, [r7, #68]	; 0x44
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	461a      	mov	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	613b      	str	r3, [r7, #16]
   return(result);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e6      	bne.n	8005160 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051a6:	bf00      	nop
 80051a8:	3754      	adds	r7, #84	; 0x54
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e027      	b.n	8005218 <HAL_UARTEx_DisableFifoMode+0x66>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2224      	movs	r2, #36	; 0x24
 80051d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005238:	2302      	movs	r3, #2
 800523a:	e02d      	b.n	8005298 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	; 0x24
 8005248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0201 	bic.w	r2, r2, #1
 8005262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f84f 	bl	800531c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e02d      	b.n	8005314 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2224      	movs	r2, #36	; 0x24
 80052c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f811 	bl	800531c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800533c:	e031      	b.n	80053a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800533e:	2308      	movs	r3, #8
 8005340:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005342:	2308      	movs	r3, #8
 8005344:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	0e5b      	lsrs	r3, r3, #25
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	0f5b      	lsrs	r3, r3, #29
 800535e:	b2db      	uxtb	r3, r3
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	7b3a      	ldrb	r2, [r7, #12]
 800536a:	4911      	ldr	r1, [pc, #68]	; (80053b0 <UARTEx_SetNbDataToProcess+0x94>)
 800536c:	5c8a      	ldrb	r2, [r1, r2]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005372:	7b3a      	ldrb	r2, [r7, #12]
 8005374:	490f      	ldr	r1, [pc, #60]	; (80053b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005376:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005378:	fb93 f3f2 	sdiv	r3, r3, r2
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	7b7a      	ldrb	r2, [r7, #13]
 8005388:	4909      	ldr	r1, [pc, #36]	; (80053b0 <UARTEx_SetNbDataToProcess+0x94>)
 800538a:	5c8a      	ldrb	r2, [r1, r2]
 800538c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005390:	7b7a      	ldrb	r2, [r7, #13]
 8005392:	4908      	ldr	r1, [pc, #32]	; (80053b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005394:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005396:	fb93 f3f2 	sdiv	r3, r3, r2
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	08005880 	.word	0x08005880
 80053b4:	08005888 	.word	0x08005888

080053b8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b08b      	sub	sp, #44	; 0x2c
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	613b      	str	r3, [r7, #16]
  return result;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80053de:	2320      	movs	r3, #32
 80053e0:	e003      	b.n	80053ea <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2103      	movs	r1, #3
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	401a      	ands	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	61fb      	str	r3, [r7, #28]
  return result;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800540c:	2320      	movs	r3, #32
 800540e:	e003      	b.n	8005418 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	372c      	adds	r7, #44	; 0x2c
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	605a      	str	r2, [r3, #4]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005462:	b480      	push	{r7}
 8005464:	b08b      	sub	sp, #44	; 0x2c
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	613b      	str	r3, [r7, #16]
  return result;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005488:	2320      	movs	r3, #32
 800548a:	e003      	b.n	8005494 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2103      	movs	r1, #3
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	61fb      	str	r3, [r7, #28]
  return result;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80054b6:	2320      	movs	r3, #32
 80054b8:	e003      	b.n	80054c2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	431a      	orrs	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80054d0:	bf00      	nop
 80054d2:	372c      	adds	r7, #44	; 0x2c
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80054dc:	b480      	push	{r7}
 80054de:	b08b      	sub	sp, #44	; 0x2c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	613b      	str	r3, [r7, #16]
  return result;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005502:	2320      	movs	r3, #32
 8005504:	e003      	b.n	800550e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	2103      	movs	r1, #3
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	401a      	ands	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	61fb      	str	r3, [r7, #28]
  return result;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005530:	2320      	movs	r3, #32
 8005532:	e003      	b.n	800553c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	431a      	orrs	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60da      	str	r2, [r3, #12]
}
 800554a:	bf00      	nop
 800554c:	372c      	adds	r7, #44	; 0x2c
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005556:	b480      	push	{r7}
 8005558:	b08b      	sub	sp, #44	; 0x2c
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	613b      	str	r3, [r7, #16]
  return result;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800557c:	2320      	movs	r3, #32
 800557e:	e003      	b.n	8005588 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	210f      	movs	r1, #15
 800558c:	fa01 f303 	lsl.w	r3, r1, r3
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	61fb      	str	r3, [r7, #28]
  return result;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80055aa:	2320      	movs	r3, #32
 80055ac:	e003      	b.n	80055b6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	431a      	orrs	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80055c4:	bf00      	nop
 80055c6:	372c      	adds	r7, #44	; 0x2c
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b08b      	sub	sp, #44	; 0x2c
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	613b      	str	r3, [r7, #16]
  return result;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e003      	b.n	8005604 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	210f      	movs	r1, #15
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	401a      	ands	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	61fb      	str	r3, [r7, #28]
  return result;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	fa01 f303 	lsl.w	r3, r1, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005642:	bf00      	nop
 8005644:	372c      	adds	r7, #44	; 0x2c
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	60fb      	str	r3, [r7, #12]
  return result;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <LL_GPIO_Init+0x26>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800567e:	e047      	b.n	8005710 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2101      	movs	r1, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa01 f303 	lsl.w	r3, r1, r3
 800568c:	4013      	ands	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d039      	beq.n	800570a <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d003      	beq.n	80056a6 <LL_GPIO_Init+0x58>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d10d      	bne.n	80056c2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	461a      	mov	r2, r3
 80056ac:	69b9      	ldr	r1, [r7, #24]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fed7 	bl	8005462 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	461a      	mov	r2, r3
 80056ba:	69b9      	ldr	r1, [r7, #24]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff feb8 	bl	8005432 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	461a      	mov	r2, r3
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff06 	bl	80054dc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d111      	bne.n	80056fc <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2bff      	cmp	r3, #255	; 0xff
 80056dc:	d807      	bhi.n	80056ee <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	461a      	mov	r2, r3
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff35 	bl	8005556 <LL_GPIO_SetAFPin_0_7>
 80056ec:	e006      	b.n	80056fc <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	461a      	mov	r2, r3
 80056f4:	69b9      	ldr	r1, [r7, #24]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ff6a 	bl	80055d0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	461a      	mov	r2, r3
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe57 	bl	80053b8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1b0      	bne.n	8005680 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005730:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005734:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	b29b      	uxth	r3, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	4013      	ands	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800575e:	b084      	sub	sp, #16
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	f107 0014 	add.w	r0, r7, #20
 800576c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	b004      	add	sp, #16
 800579e:	4770      	bx	lr

080057a0 <memset>:
 80057a0:	4402      	add	r2, r0
 80057a2:	4603      	mov	r3, r0
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d100      	bne.n	80057aa <memset+0xa>
 80057a8:	4770      	bx	lr
 80057aa:	f803 1b01 	strb.w	r1, [r3], #1
 80057ae:	e7f9      	b.n	80057a4 <memset+0x4>

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4d0d      	ldr	r5, [pc, #52]	; (80057e8 <__libc_init_array+0x38>)
 80057b4:	2600      	movs	r6, #0
 80057b6:	4c0d      	ldr	r4, [pc, #52]	; (80057ec <__libc_init_array+0x3c>)
 80057b8:	1b64      	subs	r4, r4, r5
 80057ba:	10a4      	asrs	r4, r4, #2
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	4d0b      	ldr	r5, [pc, #44]	; (80057f0 <__libc_init_array+0x40>)
 80057c2:	2600      	movs	r6, #0
 80057c4:	4c0b      	ldr	r4, [pc, #44]	; (80057f4 <__libc_init_array+0x44>)
 80057c6:	f000 f817 	bl	80057f8 <_init>
 80057ca:	1b64      	subs	r4, r4, r5
 80057cc:	10a4      	asrs	r4, r4, #2
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	3601      	adds	r6, #1
 80057da:	4798      	blx	r3
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	3601      	adds	r6, #1
 80057e4:	4798      	blx	r3
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	08005898 	.word	0x08005898
 80057ec:	08005898 	.word	0x08005898
 80057f0:	08005898 	.word	0x08005898
 80057f4:	0800589c 	.word	0x0800589c

080057f8 <_init>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	bf00      	nop
 80057fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fe:	bc08      	pop	{r3}
 8005800:	469e      	mov	lr, r3
 8005802:	4770      	bx	lr

08005804 <_fini>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	bf00      	nop
 8005808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580a:	bc08      	pop	{r3}
 800580c:	469e      	mov	lr, r3
 800580e:	4770      	bx	lr
